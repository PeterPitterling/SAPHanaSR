#!/usr/bin/python3
# pylint: disable=consider-using-f-string
# pylint: disable=fixme
"""
 saphana_sr_tools.py
 Author:       Fabian Herschel, May 2023
 License:      GNU General Public License (GPL)
 Copyright:    (c) 2023 SUSE LLC

# TODO: STEP01: SID-autodetection - get SID from query for SAPHanaController/SAPHanaTopologyResource - warn, if there are no or more than one SIDs found.
# TODO: STEP02: Think also about multi SID implementation - maybe by using multiple HanaCluster objects (one per SID)
"""

import argparse
from datetime import datetime
import sys
sys.path.insert(1, '/usr/local/lib')
from saphana_sr_tools import HanaCluster

if __name__ == "__main__":
    myCluster = HanaCluster()
    parser = argparse.ArgumentParser()
    parser.add_argument("--cib", help="specify the cibfile file")
    parser.add_argument("--format", help="output format ([table], path, script, json)")
    parser.add_argument("--properties", help="specify the properties file")
    parser.add_argument("--select", help="selecton of attributes to be printed (default, [test], minimal, sr, all)")
    parser.add_argument("--sid", help="specify the sid to check for")
    parser.add_argument("--sort", help="specify the column name to sort by")
    #parser.add_argument("--dumpFailures", help="print failed checks per loop",
    #                    action="store_true")
    args = parser.parse_args()
    if args.cib:
        myCluster.config['cib_file'] = args.cib
    if args.format:
        myCluster.config['format'] = args.format
    if args.properties:
        myCluster.config['properties_file'] = args.properties
    if args.select:
        myCluster.config['select'] = args.select
    if args.sid:
        myCluster.config['sid'] = args.sid.lower()
    if args.sort:
        if args.sort[0] == '-':
            myCluster.config['sort-reverse'] = True
            myCluster.config['sort'] = args.sort[1:]
        elif args.sort[0] == '+':
            myCluster.config['sort-reverse'] = False
            myCluster.config['sort'] = args.sort[1:]
        else:
            myCluster.config['sort'] = args.sort
    myCluster.read_properties()
    myCluster.xml_import(myCluster.config['cib_file'])
    multi_sid = False
    if myCluster.config['sid'] == None:
        myCluster.get_sids()
        if len(myCluster.sids) == 0:
            print("ERR: No SID found in cluster config")
            sys.exit(1)
        elif len(myCluster.sids) > 1:
            print(f"WARN: Multiple SIDs found in cluster config: {str(myCluster.sids)} Please specify SID using --sid <SID>")
            multi_sid = False
            sys.exit(1)
        else:
           myCluster.config['sid'] = myCluster.sids[0].lower()
    myCluster.fill_glob_dict()
    myCluster.fill_res_dict()
    myCluster.fill_site_dict()
    myCluster.fill_host_dict()
    oformat = "table"
    if 'format' in myCluster.config:
        oformat = myCluster.config['format']
    if oformat == "table":
        index = myCluster.config['sort']
        index_type = 'str'
        index_reverse = myCluster.config['sort-reverse']
        if index == None:
            myCluster.print_dic_as_table(myCluster.glob_dict, "global", "Global")
            myCluster.print_dic_as_table(myCluster.res_dict, "resource", "Resource")
            myCluster.print_dic_as_table(myCluster.site_dict, "site", "Site")
            myCluster.print_dic_as_table(myCluster.host_dict, "host", "Host")
        else:
            myCluster.print_dic_as_table(dict(sorted(myCluster.glob_dict.items(), key=lambda item: (get_sort_value(item[1],index, type=index_type)), reverse=index_reverse)), "global",   "Global")
            myCluster.print_dic_as_table(dict(sorted(myCluster.res_dict.items(),  key=lambda item: (get_sort_value(item[1],index, type=index_type)), reverse=index_reverse)), "resource", "Resource")
            myCluster.print_dic_as_table(dict(sorted(myCluster.site_dict.items(), key=lambda item: (get_sort_value(item[1],index, type=index_type)), reverse=index_reverse)), "site",     "Site")
            myCluster.print_dic_as_table(dict(sorted(myCluster.host_dict.items(), key=lambda item: (get_sort_value(item[1],index, type=index_type)), reverse=index_reverse)), "host",     "Host")
    elif oformat == "json":
        myCluster.print_all_as_json()
    elif oformat == "path" or oformat == "script":
        myCluster.print_dic_as_path(myCluster.glob_dict, "global", "Global", quote='"')
        myCluster.print_dic_as_path(myCluster.res_dict, "resource", "Resource", quote='"')
        myCluster.print_dic_as_path(myCluster.site_dict, "site", "Site", quote='"')
        myCluster.print_dic_as_path(myCluster.host_dict, "host", "Host", quote='"')
