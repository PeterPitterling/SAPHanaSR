#!/bin/bash
#
# SAPHanaTopology
#
# Description:	Clone resource to analyze SAPHana-Topology
#
###################################################################################################################
#
# Thanks to Alexander Krauth for providing SAPInstance and SAPDatabase
#
# SAPHanaTopology: (short sht)
# Author:       Fabian Herschel, February 2014
# Support:      linux@sap.com
# License:      GNU General Public License (GPL)
# Copyright:    (c) 2014 SUSE Linux Products GmbH
#               (c) 2015-2016 SUSE Linux GmbH
#               (c) 2017-2023 SUSE LLC
#
# An example usage:
#      See usage() function below for more details...
#
# OCF instance parameters:
#   OCF_RESKEY_SID            (LNX, NDB, SLE)
#   OCF_RESKEY_InstanceNumber (00..99)
#	OCF_RESKEY_DIR_EXECUTABLE   (optional, well known directories will be searched by default)
#
#######################################################################
# DONE PRIO 1: AFTER(!) SAP HANA SPS12 is available we could use hdbnsutil --sr_stateConfiguration
SAPHanaTopologyVersion="1.001.2"
#
# Initialization:
timeB=$(date '+%s')

OCF_FUNCTIONS_DIR="${OCF_FUNCTIONS_DIR:-${OCF_ROOT}/lib/heartbeat}"
source "${OCF_FUNCTIONS_DIR}/ocf-shellfuncs"

#######################################################################
log_attributes=false
if ocf_is_true "$log_attributes"; then
    log_attr_file="/var/log/fhATTRIBUTES"
else
    log_attr_file="/dev/null"
fi

HANA_STATE_PRIMARY=0
HANA_STATE_SECONDARY=1
HANA_STATE_STANDALONE=2
HANA_STATE_DEFECT=3

debug_attributes=0
SH=/bin/sh

# TODO PRIO1: adjust the correct path and file name for the library to be sourced for first testing use current directory
source /root/SAPHanaSR-NG/saphana-topology-lib

#
# function: main - main function to operate
# params:   ACTION
# globals:  OCF_*(r), SID(w), sidadm(w), InstanceName(w), DIR_EXECUTABLE(w), ACTION(w), CLACT(w), ra_rc(rw), $0(r), %ENV(r)
#

## GLOBALS
SID=""
sidadm=""
InstanceName=""
InstanceNr=""
DIR_EXECUTABLE=""
declare -u SAPHanaFilter='ra-act-dec-lpa'
NODENAME="$(crm_node -n)"

if [ "$#" != "1" ]
then
  sht_usage
  exit "$OCF_ERR_ARGS"
fi

ACTION="$1"
if [ "$ACTION" = "status" ]; then
    ACTION=monitor
fi

# These operations don't require OCF parameters to be set
case "$ACTION" in
    usage|methods)  sht_"$ACTION"
                    exit "$OCF_SUCCESS";;
    meta-data)      sht_meta_data
                    exit "$OCF_SUCCESS";;
    notify)         sht_notify
                    exit "$OCF_SUCCESS";;
    admin-setup)    admin-setup
                    exit "$OCF_SUCCESS";;
    *);;
esac
sht_init

if ! ocf_is_root
then
    super_ocf_log err "ACT: $0 must be run as root"
    exit "$OCF_ERR_PERM"
fi

# parameter check
if  [ -z "$OCF_RESKEY_SID" ]
then
    super_ocf_log err "ACT: Please set parameter SID!"
    exit "$OCF_ERR_ARGS"
fi

if  [ -z "$OCF_RESKEY_InstanceNumber" ]
then
    super_ocf_log err "ACT: Please set parameter InstanceNumber!"
    exit "$OCF_ERR_ARGS"
fi

if is_clone
then
    CLACT=_clone
else
    if [[ "$ACTION" = "promote" || "$ACTION" = "demote" ]]
    then
        super_ocf_log err "ACT: $ACTION called in a non clone environment"
        exit "$OCF_ERR_ARGS"
    fi
fi

super_ocf_log info "RA ==== begin action $ACTION$CLACT ($SAPHanaTopologyVersion) ===="
ra_rc="$OCF_ERR_UNIMPLEMENTED"
case "$ACTION" in
    start|stop|monitor) # Standard controlling actions
        sht_"$ACTION$CLACT"
        ra_rc="$?"
        ;;
    validate-all)
        sht_validate
        ra_rc="$?"
        ;;
    reload )
        ra_rc="$OCF_SUCCESS"
        ;;
    *)  # seems to be an unknown request
        sht_methods
        ra_rc="$OCF_ERR_UNIMPLEMENTED"
        ;;
esac
timeE="$(date '+%s')"
(( timeR = timeE - timeB ))
super_ocf_log info "RA ==== end action $ACTION$CLACT with rc=${ra_rc} ($SAPHanaTopologyVersion) (${timeR}s)===="
exit "${ra_rc}"
