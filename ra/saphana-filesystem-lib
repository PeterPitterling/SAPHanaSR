# saphana-filesystem-lib
#
# Description:	Clone resource to check vitality of SAP HANA filesystem
#
###################################################################################################################
#
# saphana-filesystem-lib: (short sht)
# Author:       Fabian Herschel, February 2023
# Support:      linux@sap.com
# License:      GNU General Public License (GPL)
# Copyright:    (c) 2023 SUSE LLC
#
# An example usage:
#      See usage() function below for more details...
#
# OCF instance parameters:
#   OCF_RESKEY_SID              (LNX, SUS, SLE)
#   OCF_RESKEY_InstanceNumber   (00..99)
#
#######################################################################
#
saphana_filesystem_lib_version="0.002.10"
#
#######################################################################

function shfs_log_version() {
    # called by: TODO
    super_ocf_log info "RA: saphana_filesystem_lib_version=$saphana_filesystem_lib_version"
} # end function shfs_log_version

#
# function: shfs_usage - short usage info
# params:   -
# globals:  $0(r)
#
function shfs_usage() {
    # called by: TODO
    super_ocf_log info "FLOW ${FUNCNAME[0]} ($*)"
    local rc=0
    methods=$(sht_methods all)
    methods="${methods// /|}"
	echo "usage: $0 ($methods)

    $0 manages a SAP HANA Instance as an HA resource.

    The 'start'        operation bind-mounts the fS
    The 'stop'         operation unmounts the fs
    The 'status'       operation reports whether the HANA instance is running
    The 'monitor'      operation reports whether the HANA instance seems to be working in multi-state configuration it also needs to check the system replication status
    The 'notify'       operation always returns SUCCESS
    The 'validate-all' operation reports whether the parameters are valid
    The 'methods'      operation reports on the methods $0 supports
    The 'reload'       operation allows to change parameters without forcing a recover of all instances
    "
	return "$rc"
} # end function shfs_usage

#
# function: shfs_meta_data - print resource agent meta-data for cluster
# params:   -
# globals:  -
#
function shfs_meta_data() {
    # called by: TODO
    super_ocf_log info "FLOW ${FUNCNAME[0]} ()"
    local rc=0
    # shellcheck disable=SC2016
    echo '<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="SAPHanaFilesystem" version="$SAPHanaFilesystemVersion">
    <version>1.0</version>
    <shortdesc lang="en">TODO shortdesc</shortdesc>
    <longdesc lang="en">TODO longdesc
    </longdesc>
<parameters>
    <parameter name="SID" unique="0" required="1">
        <longdesc lang="en">The SAP System Identifier (SID)</longdesc>
        <shortdesc lang="en">The SAP System Identifier (SID)</shortdesc>
        <content type="string" default="" />
    </parameter>
    <parameter name="InstanceNumber" unique="0" required="1">
        <longdesc lang="en">The SAP Instance Number - currently not used (placeholder)</longdesc>
        <shortdesc lang="en">The SAP Instance Number</shortdesc>
        <content type="string" default="" />
    </parameter>
</parameters>
<actions>
    <action name="start" timeout="600" />
    <action name="stop" timeout="300" />
    <action name="status" timeout="60" />
    <action name="monitor" depth="0" timeout="600" interval="60" />
    <action name="validate-all" timeout="5" />
    <action name="meta-data" timeout="5" />
    <action name="methods" timeout="5" />
    <action name="reload" timeout="5" />
</actions>
</resource-agent>
'
return "$rc"
} # end function shfs_meta_data

#
# function: shfs_methods - report supported cluster methods
# params:   all
# globals:  -
# methods: What methods/operations do we support?
#
function shfs_methods() {
    # called by: TODO
    super_ocf_log info "FLOW ${FUNCNAME[0]} ($*)"
    local set="${1:-all}"
    local methods=""
    local rc=0
    case "$set" in
        all )
            methods="start stop status monitor notify validate-all methods meta-data usage admin-setup reload"
            ;;
        actions )
            methods="start stop status monitor reload"
            ;;
    esac
    # shellcheck disable=SC2086
    printf "%s " $methods   # unquoted "methods" is intended here ( ##shellcheck disabled for this line)
    return "$rc"
} # end function shfs_methods

#
# function: shfs_init - initialize variables for the resource agent
# params:   -
# globals:  OCF_*(r), SID(w), sid(rw), sidadm(w), InstanceName(w), InstanceNr(w),
# globals:  ATTR_NAME_HANA_* 
# globals:  nodelist(w)
# globals:  NODENAME(w), hdbver(w)
# shfs_init : Define global variables with default values, if optional parameters are not set
#
function shfs_init() {
    # called by: TODO
    super_ocf_log info "FLOW ${FUNCNAME[0]} ($*)"
    local rc=$OCF_SUCCESS
    local hdbANSWER=""
    local chkMethod=""
    # TODO PRIO3: NG - some vars are marked for export to avoid 'unused' error in shellcheck. Check later, if these vars are valuable again when combining Filesystem and Controller in the next step
    #
    # global
    #
    NODENAME=$(crm_node -n)
    SID="$OCF_RESKEY_SID"
    InstanceNr="$OCF_RESKEY_InstanceNumber"
    InstanceName="HDB${InstanceNr}"
    fs_hana_shared="/hana/shared/${SID}"
    td_hana_shared="$fs_hana_shared/${NODENAME}"
    pp_hana_shared="/dev/shm/poison_pill_${SID}"
    sid="${SID,,}"
    export sidadm="${sid}adm"
    #
    # init attribute definitions
    #
    saphana_init_attribute_definitions
    SAPHanaFilter=$(get_hana_attribute "X" "${ATTR_NAME_HANA_FILTER[@]}")
    mapfile -t otherNodes < <( cluster_get_other_nodes "${NODENAME}" ) # the syntax < <(..) is intended
    #
    # get HANA version
    #
    gHdbVer=$(saphana_get_hana_version)
    super_ocf_log info "DEC: SAP HANA version $gHdbVer"
    get_local_sr_config  # set global variables 'site' and 'srmode'
    #
    # get remote site
    #
    saphana_init_get_remote_site
    super_ocf_log debug "INFO: site=$gSite, mode=$gSrMode"
    super_ocf_log info "FLOW ${FUNCNAME[0]} rc=$OCF_SUCCESS"
    return "$OCF_SUCCESS"
} # end function shfs_init

#
#############################################################################
#
# function: shfs_start - start a hana instance
# params:   -
# globals:  OCF_*
# shfs_start : Start the SAP HANA instance
#
function shfs_start() {
    # called by: TODO
    super_ocf_log info "FLOW ${FUNCNAME[0]} ()"
    local rc="$OCF_NOT_RUNNING"
    local output=""
    local hanalrc=0
    local mount_rc
    shfs_reset_poison_pill
    ha_pseudo_resource "$OCF_RESOURCE_INSTANCE" start; ha_ps_rc="$?"
    case "$ha_ps_rc" in
        0 ) rc="$OCF_SUCCESS";;
        * ) rc="$OCF_NOT_RUNNING";;
    esac
    super_ocf_log info "FLOW ${FUNCNAME[0]} rc=$rc"
    return "$rc"
} # end function shfs_start

#
# function: shfs_stop - stop a hana instance
# params:   -
# globals:  OCF_*(r), SAPCONTROL(r), SID(r), InstanceName(r)
# shfs_stop: Stop the SAP HANA Filesystem Resource
#
function shfs_stop() {
    # called by: TODO
    super_ocf_log info "FLOW ${FUNCNAME[0]} ()"
    local output=""
    local rc=0
    local mount_rc
    ha_pseudo_resource "$OCF_RESOURCE_INSTANCE" stop; ha_ps_rc="$?"
    if [ -e "$pp_hana_shared" ]; then
	rm "$pp_hana_shared"
        super_ocf_log info "RA poison pill detected - reporting stop error - sleep 10s"
	sleep 10
        rc="$OCF_ERR_GENERIC"
    else
	rc="$ha_ps_rc"
    fi
    super_ocf_log info "FLOW ${FUNCNAME[0]} rc=$rc"
    return "$rc"
} # end function shfs_stop

function shfs_reset_poison_pill() {
    if [ -e "$pp_hana_shared" ]; then
        super_ocf_log info "reset old RA poison pill"
	rm "$pp_hana_shared"
    fi
}

function shfs_error_simulation() {
    if [ -e "/tmp/break_SAPHanaFilesystem_${SID}" ]; then
        rm "/tmp/break_SAPHanaFilesystem_${SID}"
        return 0
    else
        return 1
    fi 
}

#
# function: shfs_monitor - monitor a hana topology instance
# params:   --
# globals:  OCF_*(r), SAPCONTROL(r), InstanveNr(r)
# shfs_monitor: Can the given SAP instance do anything useful?
#
function shfs_monitor() {
    # called by: TODO
    super_ocf_log info "FLOW ${FUNCNAME[0]} ()"
    local rc=0
    local test_rc
    shfs_reset_poison_pill
    ha_pseudo_resource "$OCF_RESOURCE_INSTANCE" monitor; ha_ps_rc="$?"
    if ocf_is_probe; then
        rc="$ha_ps_rc"
    else
	    ( 
	      set -u
	      mkdir -p "${td_hana_shared}/tmp" &&
	      dd_opts="oflag=direct,sync bs=4k count=1 conv=fsync,sync"
	      STATUSFILE="${td_hana_shared}/tmp/test"
	      dd if=/dev/zero of="${STATUSFILE}" $dd_opts &&
	      rm "${STATUSFILE}" &&
	      rmdir "${td_hana_shared}/tmp" &&
	      ls "${td_hana_shared}"
	    ); test_rc=$?
	    #
	    # only for PoC tests allow an error simulation
	    #  
	    if shfs_error_simulation; then
		test_rc=42
	    fi
	    test_sr=$(get_SRHOOK "$gRemSite")
	    super_ocf_log info "RA monitor() test_rc=$test_rc test_sr=$test_sr"
	    case "${test_rc}_${test_sr}" in
		0_* )   rc="$OCF_SUCCESS"
			super_ocf_log info "RA monitor() ${test_rc}_${test_sr} The sun is shining"
			;;
		*_SOK ) rc="$OCF_ERR_GENERIC"
			super_ocf_log info "RA monitor() ${test_rc}_${test_sr} Go out of here"
			touch "$pp_hana_shared"
			;; 
		*_* )   rc="$OCF_ERR_GENERIC"
			super_ocf_log info "RA monitor() ${test_rc}_${test_sr} Thunderstorm"
			;; 
	    esac
    fi
    super_ocf_log info "FLOW ${FUNCNAME[0]} rc=$rc"
    return "$rc"
} # end function shfs_monitor

#
# function: shfs_status - get status of a hana instance (os tools only)
# params:   -
# globals:  SID(r), InstanceName(r), OCF_*(r), sidarm(r)
# shfs_status: Lightweight check of SAP instance only with OS tools
#
function shfs_status() {
    # called by: TODO
    super_ocf_log info "FLOW ${FUNCNAME[0]} ()"
    local rc=0
    shfs_monitor; rc="$?"
    return "$rc"
} # end function shfs_status

#
# function: shfs_validate - validation of (some) variables/parameters
# params:   -
# globals:  OCF_*(r), SID(r), InstanceName(r), InstanceNr(r),
# shfs_validate: Check the semantic of the input parameters
#
function shfs_validate() {
    # called by: TODO
    super_ocf_log info "FLOW ${FUNCNAME[0]} ($*)"
    local rc="$OCF_SUCCESS"
    #
    # check, if SID does NOT match ^[A-Z][A-Z0-9][A-Z0-9]$
    # we 'substract' the regular pattern from the string, if the result is not empty, it's not a 1:1 hit
    #
    if [[ -n "${SID/#[A-Z][A-Z0-9][A-Z0-9]/}" ]]
    then
        super_ocf_log err "ACT: Parsing instance profile name: '$SID' is not a valid SID!"
        rc="$OCF_ERR_ARGS"
    fi
    #
    # check, if InstanceNr does NOT match ^[0-9][0-9]$
    # we 'substract' the regular pattern from the string, if the result is not empty, it's not a 1:1 hit
    #
    if [[ -n  "${InstanceNr/#[0-9][0-9]/}" ]]
    then
        super_ocf_log err "ACT: Parsing instance profile name: '$InstanceNr' is not a valid instance number!"
        rc="$OCF_ERR_ARGS"
    fi

    super_ocf_log info "FLOW ${FUNCNAME[0]} rc=$rc"
    return "$rc"
} # end function shfs_validate

#
# function: shfs_start_clone - start a hana clone instance
# params:   -
# globals:  OCF_*(r),
# shfs_start_clone
#
function shfs_start_clone() { 
    # called by: TODO
    super_ocf_log info "FLOW ${FUNCNAME[0]} ($*)"
    local rc="$OCF_NOT_RUNNING"
    shfs_start; rc="$?"
    return "$rc"
} # end function shfs_start_clone

#
# function: shfs_stop_clone - stop a hana clone instance
# params:   -
# globals:  NODENAME(r), HANA_STATE_*, ATTR_NAME_*
# shfs_stop_clone
#
function shfs_stop_clone() {
    # called by: TODO
    super_ocf_log info "FLOW ${FUNCNAME[0]} ($*)"
    local rc=0
    shfs_stop; rc="$?"
    super_ocf_log info "RA: shfs_stop_clone got rc=$rc from shfs_stop()"
    return "$rc"
} # end function shfs_stop_clone

#
# function: shfs_monitor_clone - monitor a hana clone instance
# params:   -
# globals:  OCF_*, SID, InstanceNr, InstanceName, MAPPING(r)
# shfs_monitor_clone
#
function shfs_monitor_clone() {
    # called by: TODO
    super_ocf_log info "FLOW ${FUNCNAME[0]} ($*)"
    shfs_monitor; rc=$?
    super_ocf_log info "FLOW ${FUNCNAME[0]} rc=$rc"
    return "$rc"
} # end function shfs_monitor_clone
