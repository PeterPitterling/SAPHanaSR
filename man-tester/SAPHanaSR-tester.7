.\" Version: 1.001 
.\"
.TH SAPHanaSR-tester 7 "11 Nov 2023" "" "SAPHanaSR-angi"
.\"
.SH NAME
SAPHanaSR-tester \- Functional testing for SAPHanaSR clusters.
.PP
.\"
.SH DESCRIPTION
.\"
SAPHanaSR-tester is a suite of tools for automating functional tests of SAP HANA
system replication HA clusters.

Predefined functional tests are shipped for scale-up and scale-out scenarios.
This tests could be run out-of-the-box. The predefined tests also can be used
for creating new test definitions. So parameters for timing and expected
attributes can be customised.

The test cases are defined in dedicated files. Each test is separated into
steps.
For each step there is an expectation for SAPHanaSR attributes, which need to
match. Additionally each step defines the 'next' step and an optional action
to be triggered if the step status has been reached (all expectations match).
See section SYNTAX below for comparators and other details.

For tests involving complex actions on the cluster nodes, predefined shell
scripts are executed remotely.
.\" TODO state machine.

See manual pages SAPHanaSR-tests-angi-ScaleUp(7) and
SAPHanaSR-tests-angi-ScaleOut(7) for predefined test cases and further details.
See also the REQUIREMENTS section below.

.B SAPHanaSR-tester is shipped as technology preview.
.PP
.\"
.SH SYNTAX
.\" 
The test cases are defined in JSON files. Each test case is described in one
file. It also can reference to defaults.json for common status definitions.
.PP
\fB*\fP Test step status
.PP
Each step contains an expectation for SAPHanaSR attributes, which need to
match. The step status are:
.TP
globalUp
both sites are up and in sync
.TP
globalDown
not yet implemented
.TP
pHostUp
host p (expected to be primary before the test starts) is up  
.TP
pSiteUp
site p is up  
.TP
sSiteUp
site s (expected to be secondary before the test starts) is up  
.TP
sHostUp
host s is up  
.TP
pHostDown
host p is down 
.TP
pSiteDown
site p is down 
.TP
sSiteDown
site s is down 
.TP
sHostDown
host s is down 
.PP
Note: Prefixes "s" and "p" are statically indicating geographical sites, as
seen at the beginning of a test. If a takeover happens during that test, the
final secondary site might be prefixed "p". 
.PP
Each test step status is described by one or more conditions. Each conditions
is described by one comparision. This conditions are combined by logical "AND".
Each comparision consists of one CIB SAPHanaSR attribute name, one comparator
and one value or regular expression. This comparator and expression could
contain logical "OR". A status with two conditions looks like this:
.PP
"\fR<test_step_status>\fP": [
.br
               "\fR<parameter_name> <comparator> <value>" ,
.br
               "\fR<parameter_name> <comparator> <value>"
.br
           ]
.PP
See also the EXAMPLES section in manual pages SAPHanaSR-tests-angi-ScaleUp(7)
and SAPHanaSR-tests-angi-ScaleOut(7).
.\"
.PP
\fB*\fP Test comparators
.PP
A set of comparators is implemented. Some take integers, take some regular
expression. In addition the "None" TODO. 
.\" saphana_sr_test.py
.\" re.search("(.*) (==|!=|>|>=|<|<=|~|!~|>~|is) (.*)", single_check)
.TP
==
equal
.TP
!=
not equal
.TP
>=
greater or equal
.TP
<=
less or equal
.TP
>
greater
.TP
<
less
.TP
>~
greater or like
.TP
~
like
.TP
!~
not like
.TP
is
TODO
.PP
\fB*\fP Test properties
.PP
TODO statical values, decribing the test system.

See also example below.
.PP
.\"
.SH EXAMPLES
.\"
\fB*\fR Installing SAPHanaSR-tester.
.PP
The SAPHanaSR-tester is installed on an node outside the Linux cluster.
Password-less login for user root is prepared. The tester properties are
adapted to the SAPHanaSR scale-up cluster. Example scale-up cluster nodes are
node1 and node2, SID is Q42, instance number is 85.
.PP
.RS 2
# zypper in SAPHanaSR-tester
.br
# zypper in python3-paramiko
.br
# ssh-kegen -t rsa -b 4096
.br
# ssh-copy-id root@node1
.br
# ssh-copy-id root@node2
.br
# ssh-copy-id root@localhost
.br
# cp /usr/share/SAPHanaSR-tester/json/angi-ScaleUp/properties.json ~/properties_q42.json
.br
# vi ~/properties_q42.json
.br
{
.br
    "sid": "Q42",
.br
    "instNo": "85",
.br
    "mstResource": "mst_SAPHanaCon_Q42_HDB85",
.br
    "clnResource": "cln_SAPHanaTop_Q42_HDB85"
.br
}
.br
:wq
.RE
.PP
\fB*\fR Showing predefined functional scale-up test cases.
.PP
.\" TODO
# ls /usr/share/SAPHanaSR-tester/json/angi-ScaleUp/*.json | \\
.br
while read; do echo $REPLY; grep "name" $REPLY | head -1; done
.RE
.PP
\fB*\fR Running a very basic functional test.
.PP
The functional test "nop" is performed on the Linux cluster defined above.
A dedicated working directory and logfile for this test is used. 
.PP
.RS 2
# mkdir ~/test_nop; cd ~/test_nop
.br
# export TROOT=/usr/share/SAPHanaSR-tester/json/angi-ScaleUp/
.br
# SAPHanaSR-testCluster-multiNode \\
.br
--testFile $TROOT/nop.json \\
.br
--remoteNodes node1 node2 \\
.br
--defaultsFile $TROOT/defaults.json \\
.br
--properties ~/properties_q42.json \\
.br
--logFile test.log
.RE
.PP
\fB*\fR Showing failed tests from logfile.
.PP
Failed step 10 are ignored. That step checks for pre-requisites. A failed step
10 means the test can not be performed successfully. Logfile is test.log.
.PP
.RS 2
# grep "STATUS.*FAILED" test.log | \\
.br
grep -v step10 | awk '{print $3}' | sort -u
.RE
.PP
\fB*\fR Showing details for a single test.
.PP
Test ID is 8585, logfile is test.log, debug output is omitted.
.PP
.RS 2
# grep "\\[8585\\]" test.log | grep -v "DEBUG:"
.RE
.PP
.\"
.SH FILES
.\"
/usr/share/SAPHanaSR-tester/json/angi-ScaleUp/
functional tests for SAPHanaSR-angi scale-up scenarios.
.TP
/usr/share/SAPHanaSR-tester/json/angi-ScaleOut/
functional tests for SAPHanaSR-angi scale-out ERP scenarios, without HANA host auto-autofailover.
.TP
/usr/share/SAPHanaSR-tester/json/angi-ScaleOut-BW/
functional tests for SAPHanaSR-angi scale-out BW scenarios, with HANA host auto-autofailover. Not yet implemented.
.TP
/usr/share/SAPHanaSR-tester/json/classic-ScaleUp/
not yet implemented.
.TP
/usr/share/SAPHanaSR-tester/json/classic-ScaleOut/
not yet implemented.
.TP
/usr/share/SAPHanaSR-tester/json/classic-ScaleOut-BW/
not yet implemented.
.TP
$PWD/.test_properties
auto-generated properties file for called shell scripts. No need to touch.
.TP
/usr/bin/
TODO
.PP
.\"
.SH REQUIREMENTS
.\"
For the current version of the SAPHanaSR-tester, the capabilities are limited
to the following:
.PP
1. Resource agents and configuration of SAPHanaSR-angi.
.PP
2. Scale-up setups with or without multi-target replication.
No scale-up multi-SID (MCOS) setups.
.PP
3. Scale-out setups with or without multi-target replication.
No HANA host auto-failover.
.PP
4. SAPHanaSR-tester is installed and used on an node outside the Linux cluster.
.PP
5. User root needs password-free access to the Linux cluster nodes and the node
where SAPHanaSR-tester is installed.
.PP
6. Package python3-paramiko is needed for the testerÂ´s multi-node feature.
.PP
7. Strict time synchronization between the cluster nodes and the tester node,
e.g. NTP. All nodes have configured the same timezone.
.PP
8. The services pacemaker and corosync need to be enabled for this tests. 
If disk-based SBD is used, then service sbd enabled and SBD_STARTMODE=always
is needed for this tests. The stonith-action=reboot is needed in any case.
This cluster basics might be different for production.
.PP
9. The tester must not be used for production systems.
Most tests are disruptive.
.PP
.\"
.SH BUGS
In case of any problem, please use your favourite SAP support process to open
a request for the component BC-OP-LNX-SUSE.
Please report any other feedback and suggestions to feedback@suse.com.
.PP
.\"
.SH SEE ALSO
\fBSAPHanaSR-testCluster-multiNode\fP(8) ,
\fBSAPHanaSR-tests-angi-ScaleUp\fP(7) , \fBSAPHanaSR-tests-angi-ScaleOut\fP(7) ,
\fBSAPHanaSR-angi\fP(7) , \fBSAPHanaSR-showAttr\fP(8) , \fBcrm_mon\fP(8) ,
\fBssh-keygen\fP(1) , \fBssh-copy-id\fP(1) ,
.br
https://documentation.suse.com/sbp/sap/ ,
.br
https://documentation.suse.com/sles-sap/ ,
.br
https://www.suse.com/releasenotes/
.PP
.\"
.SH AUTHORS
F.Herschel, L.Pinne.
.PP
.\"
.SH COPYRIGHT
(c) 2023 SUSE Linux GmbH, Germany.
.br
The package SAPHanaSR-tester comes with ABSOLUTELY NO WARRANTY.
.br
For details see the GNU General Public License at
http://www.gnu.org/licenses/gpl.html
.\"
