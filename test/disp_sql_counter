# pylint: disable=invalid-name,fixme,broad-except
"""
# disp_sql_counter
# Authors:      Fabian Herschel, May 2023
# License:      GNU General Public License (GPL)
# Copyright:    (c) 2023 SUSE LLC

CREATE ROW TABLE fhcounter (timestamp TIMESTAMP, counter BIGINT);


select * from fhcounter;
"""

# loading classes and libraries
import os
import time
from concurrent import futures

# pylint: enable=invalid-name
try:
    from hdbcli import dbapi
except ImportError as e:
    print(f"Module dbapi not found - install the missing SAP Python Driver 'hdbcli' - {e}")

try:
    from hdb_ha_dr.client import HADRBase
except ImportError as e:
    print(f"Module HADRBase not found - running outside of SAP HANA? - {e}")

# parameter section
FHVERSION = "1.001.2"
USERKEY_DFLT = "TESTER"
#


# pylint: disable-next=invalid-name
class disp_sql():

    def __init__(self, *args, **kwargs):
        #my_sid_upper = os.environ.get('SAPSYSTEMNAME')
        #mysid = my_sid_upper.lower()
        # TODO: user key by option
        self.userkey = USERKEY_DFLT
        self.connection = None
        self.list=[]

    def connect(self, **kargs):
        # TODO: key=userkey, table=tablename
        try:
            connection = dbapi.connect(key=self.userkey)
        except Exception as exerr:
            print(f"error during database connection - {exerr}.")
            return None
        if not connection.isconnected():
            print("database connection could not be established")
            return None
        self.connection = connection
        return connection

    def disconnect(self):
        if self.connection:
            self.connection.close()

    def insert(self):
        count = 1
        time_str = f"{time.strftime('%Y-%m-%d %H:%M:%S')}"
        insert_sql = f"insert into fhcounter (timestamp, counter) VALUES ( '{time_str}', {count} );"

        connection = self.connection
        if connection == None or not connection.isconnected():
            print("insert(): database connection could not be established or disconnected now")
            return(1)
        cursor = connection.cursor()
        try:
            cursor.execute(insert_sql)
        except Exception as exerr:
            print("error during execution of the sql statement" f" {insert_sql} - {exerr}.")
        try:
            connection.commit()
        except Exception as exerr:
            print("error during commit" f"- {exerr}.")
        cursor.close()
        return 0

    def count(self, **kargs):
        count_sql = "select count(*) from fhcounter"
        connection = self.connection
        result = None
        if connection == None or not connection.isconnected():
            return result

        cursor = connection.cursor()
        try:
            cursor.execute(count_sql)
            for row in cursor:
                #print(row[0], end='')
                result = row[0]
        except Exception as exerr:
            print("error during execution of the sql statement"
                             f" {count_sql} - {exerr}.", end='')
        cursor.close()
        return result

    def select(self):
        select_sql = "SELECT timestamp, counter FROM fhcounter ORDER BY timestamp, counter"
        connection = self.connection
        if connection == None or not connection.isconnected():
            print("select(): database connection could not be established or disconnected now", end='')
            return 1

        cursor = connection.cursor()
        try:
            cursor.execute(select_sql)
            self.list = []
            for row in cursor:
                self.list.append(row[0])
            self.list.reverse()
        except Exception as exerr:
            print("error during execution of the sql statement"
                             f" {select_sql} - {exerr}.", end='')
        cursor.close()
        return 0

    def list_last(self, maxnr):
        now = time.time()
        outList = []
        for element in self.list[0:maxnr]:
            etime = element.timestamp()
            dtime = now - etime
            if dtime < 10:
                status = "*"
            else:
                status = "-"
            outList.append(f"[{status}]")
        outStr = "".join(outList)
        print(f"List: [{outStr}]", end='')
            

sql = disp_sql()
connection = None
i = 0
print(f"version: {FHVERSION}")
while True:
    i += 1
    status = ""
    sleep = 2
    time_str = f"{time.strftime('%Y-%m-%d %H:%M:%S')}"
    print(f"Loop {time_str}:",end='', flush=True)
    if connection == None:
        with futures.ThreadPoolExecutor(max_workers=3) as e:
            fs = {e.submit(sql.connect)}
            res = futures.wait(fs, timeout=1.0)
            for f in res.done:
                connection = f.result()
        time.sleep(sleep)
        print(f"status 01: ", end='', flush=True)
        continue
    else:
        print("isconn?",end='', flush=True)
        if not sql.connection.isconnected() or i % 100 == 0:
            status="reconnect"
            sql.disconnect()
            sql.connect()
        #else:
        #    status = "connected"
        #print("Ins:",end='', flush=True)
        #sql.insert()
        print("Cnt:",end='', flush=True)
        with futures.ThreadPoolExecutor(max_workers=3) as e:
            fs = {e.submit(sql.count)}
            res = futures.wait(fs, timeout=1.0)
            for f in res.done:
                print(f"count={f.result()}")
        #sql.count()
        #print("Sel:",end='', flush=True)
        #sql.select()
    print(f"status 02 {status}: ", end='', flush=True)
    sql.list_last(20)
    print()
    time.sleep(sleep)
sql.disconnect()
