#!/bin/bash
#
# test-lib
#
########
#
#echo "checkKeyValue() rc=$rc"
#search4getValue 'Hosts/.*/score'
#search4getObject 'Hosts/.*/score="1.0"'

set -u

declare -a sapHanaSr

function init() {
    verbose=0
    while [ $# -gt 0 ]; do
        case "$1" in
            --node=* ) node=${1#*=};;
            --verbose ) verbose=1;; 
        esac
        shift
    done
    storeSAPHanaSR "$node"
    #
    # get primary site and host
    #
    pSite="$(search4getObject 'Sites/.*/srr="P"')"
    pHost="$(search4getObject 'Hosts/.*/site="'"$pSite"'"')"
    sSite="$(search4getObject 'Sites/.*/srr="S"')"
    sHost="$(search4getObject 'Hosts/.*/site="'"$sSite"'"')"
    message "INIT(): pHost=$pHost, pSite=$pSite, sHost=$sHost, sSite=$sSite"
}

function message() {
    echo "$(date +'%Y-%m-%d %T') $*"
}

function storeSAPHanaSR() {
    # purpose: get all current SAPHanaSR values
    # params:  node 
    # global:  sapHanaSr(w)
    # callout: SAPHanaSR-showAttr
    # output:  -
    # rc:      0
    local node="$1"
    mapfile -t sapHanaSr < <(ssh "$node" "SAPHanaSR-showAttr --format=script")
    return 0
}

function search4getValue() {
    # purpose: search in sapHanaSr for pattern and return value(s) 
    # params:  reg Exp
    # global:  sapHanaSr(r)
    # callout: -
    # output:  value(s)
    # if it hits 'Hosts/node02/clone_state="DEMOTED"' it returns "DEMOTED"
    local regExp="$1" s r
    local -a results
    mapfile -t results < <(
            for s in "${sapHanaSr[@]}"; do 
                echo "$s" | awk -F=  '$0 ~ regExp { print $2 }' regExp="$regExp";
            done
        )
    for r in "${results[@]}"; do
        echo "${r//\"/}"
    done
}

function search4getObject() {
    # purpose: search in sapHanaSr for pattern and return objects(s)
    # params:  reg Exp
    # global:  sapHanaSr(r)
    # callout: -
    # output:  value(s)
    # if it hits 'Hosts/node02/clone_state="DEMOTED"' it returns "node02"
    local regExp="$1" s r
    local -a results
    mapfile -t results < <(
            for s in "${sapHanaSr[@]}"; do 
                echo "$s" | awk -F'[/=]'  '$0 ~ regExp { print $2 }' regExp="$regExp";
            done
        )
    for r in "${results[@]}"; do
        echo "${r//\"/}"
    done
}

function search4getKeyValue() {
    # purpose: search in sapHanaSr for pattern and return key-value pairs(s)
    # params:  reg Exp
    # global:  sapHanaSr(r)
    # callout: -
    # output:  value(s)
    # if it hits 'Hosts/node02/clone_state="DEMOTED"' it returns 'clone_state="DEMOTED"'
    local regExp="$1" s r
    local -a results
    mapfile -t results < <(
            for s in "${sapHanaSr[@]}"; do 
                echo "$s" | awk -F'/'  '$0 ~ regExp { print $3 }' regExp="$regExp";
            done
        )
    for r in "${results[@]}"; do
        echo "${r//\"/}"
    done
}

function checkKeyValue() {
        # purpose: search in given array1 for patterns in array2
        # remark keyValues and patterns are both arrays. Each array member MUST be in the form key=value
        # output: failed tests - must ONLY output the failed tests, nothing more!!
        local -a keyValues 
        local -a patterns
        local nowPatterns=1 kV p
        local rc=0
        local -a failedTests
        local purpose
        while [ $# -gt 0 ]; do
            case "$1" in
                --purpose=* ) purpose="${1#*=}";;
                --keyValue ) nowPatterns=1;;
                --pattern ) nowPatterns=0;;
                * ) if [ "$nowPatterns" == 0 ]; then
                        patterns=( "${patterns[@]}" "$1" )
                    else
                        keyValues=( "${keyValues[@]}" "$1" )
                    fi
            esac
            shift
        done
        for p in "${patterns[@]}"; do
            kVFound=2
            for kV in "${keyValues[@]}"; do
                vKey="${kV%=*}"; pKey="${p%=*}"
                if [ "$vKey" == "$pKey" ]; then # if same key, check if we match
                    echo "$kV" | grep -E -q "$p" && kVFound=0 && break || kVFound=1 && break
                fi
            done
            case "$kVFound" in
                0 ) # matching
                    #echo "kV $kV matched by p $p" >&2
                    ;;
                1 ) # not matching
                    failedTests=( "${failedTests[@]}" "$purpose: $kV !~ $p" )
                    if [ "$verbose" == "1" ]; then
                        echo "$purpose: $kV !~ $p" >&2
                    fi
                    rc=1
                    ;;
                2)  #  
                    failedTests=( "${failedTests[@]}" "$purpose: missing $p" )
                    if [ "$verbose" == "1" ]; then
                        echo "$purpose: missing $p" >&2
                    fi
                    rc=1
                    ;;
            esac
        done
        if [[ "$rc" == 1 ]]; then 
            echo "${failedTests[@]}"
        fi
        return "$rc"
}

function getAllKeyValue() {
    #
    #
    #
    mapfile -t primarySite   <  <(search4getKeyValue 'Sites/'"$pSite"'/')
    mapfile -t secondarySite <  <(search4getKeyValue 'Sites/'"$sSite"'/')

    mapfile -t primaryHost   <  <(search4getKeyValue 'Hosts/'"$pHost"'/')
    mapfile -t secondaryHost <  <(search4getKeyValue 'Hosts/'"$sHost"'/')
}

function checkAllKeyValueHelp() {
    # output: function must just output output by checkKeyValue ...
    checkKeyValue --purpose=pSite --keyValue "${primarySite[@]}"   --pattern "${patternsPrimarySite[@]}";   
    checkKeyValue --purpose=sSite --keyValue "${secondarySite[@]}" --pattern "${patternsSecondarySite[@]}"; 
    checkKeyValue --purpose=pHost --keyValue "${primaryHost[@]}"   --pattern "${patternsPrimaryHost[@]}";   
    checkKeyValue --purpose=sHost --keyValue "${secondaryHost[@]}" --pattern "${patternsSecondaryHost[@]}";
}

function checkAllKeyValue() {
    # output: all failed tests
    local rc
    local -a failedTests
    mapfile -t failedTests < <( checkAllKeyValueHelp )
    if [[ "${failedTests[*]}" == "" ]]; then
        rc=0
    else
        echo "${failedTests[@]}"
        rc=1
    fi
    return "$rc"
}

function loopForStatus() {
    local status="$1"
    local maxLoops="$2"
    local rc=0
    local loops=0
    local lastFailedTests=""
    # TODO PRIO2: get sleep interval by parameter
    while true; do
        (( loops++ ))
        storeSAPHanaSR "$node"
        lastFailedTests="$(status_"$status")" ; rc=$?
        if [ "$rc" == 0 ]; then
            message "STATUS: REACHED STEP $status ####"
            break
        else
            if [[ "$loops" -ge "$maxLoops"  ]]; then
                message "RESULT: LAST FAILED COMPARES $lastFailedTests"
                rc=1
                break;
            fi
        fi
        sleep 2
    done
    return "$rc"
}

